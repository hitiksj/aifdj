# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 54a1708db446a10545facf33a92a642189929e64d3077c57e25be42d4b0b857d
file:
- statement:
    insert_statement:
    - keyword: INSERT
    - keyword: OVERWRITE
    - keyword: TABLE
    - table_reference:
        naked_identifier: foo
    - keyword: PARTITION
    - bracketed:
      - start_bracket: (
      - column_reference:
          naked_identifier: a
      - comparison_operator:
          raw_comparison_operator: '='
      - literal: "'test_foo'"
      - comma: ','
      - column_reference:
          naked_identifier: b
      - end_bracket: )
    - keyword: IF
    - keyword: NOT
    - keyword: EXISTS
    - select_statement:
        select_clause:
        - keyword: SELECT
        - select_clause_element:
            column_reference:
              naked_identifier: a
        - comma: ','
        - select_clause_element:
            literal: "'test_bar'"
            alias_expression:
              keyword: AS
              naked_identifier: b
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  naked_identifier: bar
- statement_terminator: ;
- statement:
    insert_statement:
    - keyword: INSERT
    - keyword: OVERWRITE
    - keyword: TABLE
    - table_reference:
        naked_identifier: foo
    - keyword: PARTITION
    - bracketed:
      - start_bracket: (
      - column_reference:
          naked_identifier: a
      - comma: ','
      - column_reference:
          naked_identifier: b
      - end_bracket: )
    - keyword: IF
    - keyword: NOT
    - keyword: EXISTS
    - select_statement:
        select_clause:
        - keyword: SELECT
        - select_clause_element:
            literal: "'test_foo'"
            alias_expression:
              keyword: AS
              naked_identifier: a
        - comma: ','
        - select_clause_element:
            literal: "'test_bar'"
            alias_expression:
              keyword: AS
              naked_identifier: b
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  naked_identifier: bar
- statement_terminator: ;
