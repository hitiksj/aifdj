# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: e53b185aef16550e59e6b85098bbc4599e7803ab2ca246518904a959ca1bba38
file:
  statement:
    create_table_statement:
    - keyword: CREATE
    - keyword: TABLE
    - table_reference:
      - naked_identifier: db
      - dot: .
      - naked_identifier: foo
    - bracketed:
      - start_bracket: (
      - column_definition:
          naked_identifier: col1
          data_type:
            primitive_type:
              keyword: string
      - comma: ','
      - column_definition:
          naked_identifier: col2
          data_type:
            primitive_type:
              keyword: int
      - comma: ','
      - column_definition:
          naked_identifier: col3
          data_type:
            primitive_type:
              keyword: decimal
      - comma: ','
      - column_definition:
          naked_identifier: col4
          data_type:
            primitive_type:
              keyword: decimal
              bracketed:
              - start_bracket: (
              - literal: '10'
              - comma: ','
              - literal: '2'
              - end_bracket: )
      - comma: ','
      - column_definition:
          naked_identifier: col5
          data_type:
            keyword: ARRAY
            start_angle_bracket: <
            data_type:
              primitive_type:
                keyword: double
            end_angle_bracket: '>'
      - comma: ','
      - column_definition:
          naked_identifier: col6
          data_type:
            keyword: MAP
            start_angle_bracket: <
            primitive_type:
              keyword: varchar
            comma: ','
            data_type:
              primitive_type:
                keyword: date
            end_angle_bracket: '>'
      - comma: ','
      - column_definition:
          naked_identifier: col7
          data_type:
          - keyword: STRUCT
          - start_angle_bracket: <
          - naked_identifier: field1
          - colon: ':'
          - data_type:
              primitive_type:
                keyword: boolean
          - comma: ','
          - naked_identifier: field2
          - colon: ':'
          - data_type:
              keyword: ARRAY
              start_angle_bracket: <
              data_type:
                primitive_type:
                - keyword: double
                - keyword: precision
              end_angle_bracket: '>'
          - comma: ','
          - naked_identifier: field3
          - colon: ':'
          - data_type:
            - keyword: UNIONTYPE
            - start_angle_bracket: <
            - data_type:
                primitive_type:
                  keyword: string
            - comma: ','
            - data_type:
                primitive_type:
                  keyword: decimal
                  bracketed:
                  - start_bracket: (
                  - literal: '10'
                  - comma: ','
                  - literal: '2'
                  - end_bracket: )
            - end_angle_bracket: '>'
          - end_angle_bracket: '>'
      - comma: ','
      - column_definition:
          naked_identifier: col8
          data_type:
          - keyword: UNIONTYPE
          - start_angle_bracket: <
          - data_type:
              primitive_type:
                keyword: string
          - comma: ','
          - data_type:
              keyword: ARRAY
              start_angle_bracket: <
              data_type:
                primitive_type:
                  keyword: char
              end_angle_bracket: '>'
          - end_angle_bracket: '>'
      - end_bracket: )
  statement_terminator: ;
