# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 90e6fc9d50bdb4bb9c9b9dc4902c179fe456a9ad3f19d3848c034c0330142766
file:
- statement:
    declare_segment:
    - keyword: DECLARE
    - identifier: x
    - data_type:
        data_type_identifier: INT64
    - keyword: DEFAULT
    - literal: '0'
- statement_terminator: ;
- multi_statement_segment:
    repeat_statement:
    - keyword: REPEAT
    - repeat_statements:
      - statement:
          set_segment:
            keyword: SET
            identifier: x
            comparison_operator:
              raw_comparison_operator: '='
            expression:
              column_reference:
                identifier: x
              binary_operator: +
              literal: '1'
      - statement_terminator: ;
      - statement:
          select_statement:
            select_clause:
              keyword: SELECT
              select_clause_element:
                column_reference:
                  identifier: x
      - statement_terminator: ;
    - keyword: UNTIL
    - expression:
        column_reference:
          identifier: x
        comparison_operator:
        - raw_comparison_operator: '>'
        - raw_comparison_operator: '='
        literal: '3'
    - keyword: END
    - keyword: REPEAT
- statement_terminator: ;
- multi_statement_segment:
    while_statement:
    - keyword: WHILE
    - expression:
        literal: 'true'
    - keyword: DO
    - while_statements:
      - statement:
          select_statement:
            select_clause:
              keyword: SELECT
              select_clause_element:
                literal: '1'
      - statement_terminator: ;
      - statement:
          continue_statement:
            keyword: CONTINUE
      - statement_terminator: ;
    - keyword: END
    - keyword: WHILE
- statement_terminator: ;
- multi_statement_segment:
    if_statement:
    - keyword: IF
    - expression:
        column_reference:
          identifier: x
        comparison_operator:
        - raw_comparison_operator: '>'
        - raw_comparison_operator: '='
        literal: '10'
    - keyword: THEN
    - if_statements:
        statement:
          select_statement:
            select_clause:
              keyword: SELECT
              select_clause_element:
                column_reference:
                  identifier: x
        statement_terminator: ;
    - keyword: END
    - keyword: IF
- statement_terminator: ;
- multi_statement_segment:
    if_statement:
    - keyword: IF
    - expression:
        column_reference:
          identifier: x
        comparison_operator:
        - raw_comparison_operator: '>'
        - raw_comparison_operator: '='
        literal: '10'
    - keyword: THEN
    - if_statements:
        statement:
          set_segment:
            keyword: SET
            identifier: x
            comparison_operator:
              raw_comparison_operator: '='
            expression:
              column_reference:
                identifier: x
              binary_operator: '-'
              literal: '1'
        statement_terminator: ;
    - keyword: ELSEIF
    - expression:
        column_reference:
          identifier: x
        comparison_operator:
          raw_comparison_operator: <
        literal: '0'
    - keyword: THEN
    - if_statements:
        statement:
          set_segment:
            keyword: SET
            identifier: x
            comparison_operator:
              raw_comparison_operator: '='
            expression:
              column_reference:
                identifier: x
              binary_operator: +
              literal: '1'
        statement_terminator: ;
    - keyword: ELSEIF
    - expression:
        column_reference:
          identifier: x
        comparison_operator:
          raw_comparison_operator: '='
        literal: '0'
    - keyword: THEN
    - if_statements:
        statement:
          set_segment:
            keyword: SET
            identifier: x
            comparison_operator:
              raw_comparison_operator: '='
            expression:
              column_reference:
                identifier: x
              binary_operator: +
              literal: '1'
        statement_terminator: ;
    - keyword: ELSE
    - if_statements:
        statement:
          select_statement:
            select_clause:
              keyword: SELECT
              select_clause_element:
                column_reference:
                  identifier: x
        statement_terminator: ;
    - keyword: END
    - keyword: IF
- statement_terminator: ;
- multi_statement_segment:
    loop_statement:
    - keyword: LOOP
    - loop_statements:
      - statement:
          set_segment:
            keyword: SET
            identifier: x
            comparison_operator:
              raw_comparison_operator: '='
            expression:
              column_reference:
                identifier: x
              binary_operator: +
              literal: '1'
      - statement_terminator: ;
      - multi_statement_segment:
          if_statement:
          - keyword: IF
          - expression:
              column_reference:
                identifier: x
              comparison_operator:
              - raw_comparison_operator: '>'
              - raw_comparison_operator: '='
              literal: '10'
          - keyword: THEN
          - if_statements:
              statement:
                leave_statement:
                  keyword: LEAVE
              statement_terminator: ;
          - keyword: ELSE
          - if_statements:
              statement:
                continue_statement:
                  keyword: CONTINUE
              statement_terminator: ;
          - keyword: END
          - keyword: IF
      - statement_terminator: ;
    - keyword: END
    - keyword: LOOP
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          column_reference:
            identifier: x
- statement_terminator: ;
- statement:
    declare_segment:
      keyword: DECLARE
      identifier: heads
      data_type:
        data_type_identifier: BOOL
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: DECLARE
    - identifier: heads_count
    - data_type:
        data_type_identifier: INT64
    - keyword: DEFAULT
    - literal: '0'
- statement_terminator: ;
- multi_statement_segment:
    loop_statement:
    - keyword: LOOP
    - loop_statements:
      - statement:
          set_segment:
            keyword: SET
            identifier: heads
            comparison_operator:
              raw_comparison_operator: '='
            expression:
              function:
                function_name:
                  function_name_identifier: RAND
                bracketed:
                  start_bracket: (
                  end_bracket: )
              comparison_operator:
                raw_comparison_operator: <
              literal: '0.5'
      - statement_terminator: ;
      - multi_statement_segment:
          if_statement:
          - keyword: IF
          - expression:
              column_reference:
                identifier: heads
          - keyword: THEN
          - if_statements:
            - statement:
                select_statement:
                  select_clause:
                    keyword: SELECT
                    select_clause_element:
                      literal: "'Heads!'"
            - statement_terminator: ;
            - statement:
                set_segment:
                  keyword: SET
                  identifier: heads_count
                  comparison_operator:
                    raw_comparison_operator: '='
                  expression:
                    column_reference:
                      identifier: heads_count
                    binary_operator: +
                    literal: '1'
            - statement_terminator: ;
            - statement:
                continue_statement:
                  keyword: CONTINUE
            - statement_terminator: ;
          - keyword: END
          - keyword: IF
      - statement_terminator: ;
      - statement:
          select_statement:
            select_clause:
              keyword: SELECT
              select_clause_element:
                literal: "'Tails!'"
      - statement_terminator: ;
      - statement:
          break_statement:
            keyword: BREAK
      - statement_terminator: ;
    - keyword: END
    - keyword: LOOP
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: CONCAT
            bracketed:
            - start_bracket: (
            - expression:
                function:
                  function_name:
                    function_name_identifier: CAST
                  bracketed:
                    start_bracket: (
                    expression:
                      column_reference:
                        identifier: heads_count
                    keyword: AS
                    data_type:
                      data_type_identifier: STRING
                    end_bracket: )
            - comma: ','
            - expression:
                literal: "' heads in a row'"
            - end_bracket: )
- statement_terminator: ;
