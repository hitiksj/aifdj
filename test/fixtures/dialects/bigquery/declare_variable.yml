# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 6db48fd893573f34c90e458f8e829f9221da5156b89418c5b4272417c62c4272
file:
- statement:
    declare_segment:
      keyword: declare
      identifier: var1
      data_type:
        data_type_identifier: int64
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: var2
    - comma: ','
    - identifier: var3
    - data_type:
        data_type_identifier: string
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: var4
    - keyword: default
    - literal: "'value'"
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: var5
    - data_type:
        data_type_identifier: int64
    - keyword: default
    - expression:
      - literal: '1'
      - binary_operator: +
      - literal: '2'
- statement_terminator: ;
- statement:
    declare_segment:
      keyword: declare
      identifier: arr1
      data_type:
        keyword: array
        start_angle_bracket: <
        data_type:
          data_type_identifier: string
        end_angle_bracket: '>'
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: arr2
    - keyword: default
    - array_literal:
      - start_square_bracket: '['
      - literal: "'one'"
      - comma: ','
      - literal: "'two'"
      - end_square_bracket: ']'
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: arr3
    - keyword: default
    - array_literal:
        start_square_bracket: '['
        end_square_bracket: ']'
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: arr4
    - data_type:
        keyword: array
        start_angle_bracket: <
        data_type:
          data_type_identifier: string
        end_angle_bracket: '>'
    - keyword: default
    - array_literal:
      - start_square_bracket: '['
      - literal: "'one'"
      - comma: ','
      - literal: "'two'"
      - end_square_bracket: ']'
- statement_terminator: ;
- statement:
    declare_segment:
      keyword: declare
      identifier: str1
      data_type:
        struct_type:
        - keyword: struct
        - start_angle_bracket: <
        - parameter: f1
        - data_type:
            data_type_identifier: string
        - comma: ','
        - parameter: f2
        - data_type:
            data_type_identifier: string
        - end_angle_bracket: '>'
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: str2
    - data_type:
        struct_type:
        - keyword: struct
        - start_angle_bracket: <
        - parameter: f1
        - data_type:
            data_type_identifier: string
        - comma: ','
        - parameter: f2
        - data_type:
            data_type_identifier: string
        - end_angle_bracket: '>'
    - keyword: default
    - expression:
        typeless_struct:
          keyword: struct
          bracketed:
          - start_bracket: (
          - literal: "'one'"
          - comma: ','
          - literal: "'two'"
          - end_bracket: )
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: str3
    - keyword: default
    - expression:
        typeless_struct:
          keyword: struct
          bracketed:
          - start_bracket: (
          - literal: "'one'"
          - comma: ','
          - literal: "'two'"
          - end_bracket: )
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: str4
    - data_type:
        struct_type:
        - keyword: struct
        - start_angle_bracket: <
        - parameter: f1
        - data_type:
            data_type_identifier: string
        - comma: ','
        - parameter: f2
        - data_type:
            data_type_identifier: string
        - end_angle_bracket: '>'
    - keyword: default
    - tuple:
        bracketed:
        - start_bracket: (
        - literal: "'one'"
        - comma: ','
        - literal: "'two'"
        - end_bracket: )
- statement_terminator: ;
- statement:
    declare_segment:
      keyword: declare
      identifier: '`var1`'
      data_type:
        data_type_identifier: string
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: '`var1`'
    - data_type:
        data_type_identifier: string
    - keyword: default
    - literal: "'value'"
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: '`var1`'
    - comma: ','
    - identifier: '`var1`'
    - data_type:
        data_type_identifier: string
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: var1
    - comma: ','
    - identifier: '`var2`'
    - data_type:
        data_type_identifier: string
- statement_terminator: ;
- statement:
    declare_segment:
    - keyword: declare
    - identifier: var1
    - comma: ','
    - identifier: '`var2`'
    - data_type:
        data_type_identifier: string
    - keyword: default
    - literal: "'value'"
- statement_terminator: ;
