# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 3f66a5c2f8b2d5c7cfec43dfc9dff187f330d01a9ec1809266e7e4b2d3f740d0
file:
- statement:
    create_source_kafka_statement:
    - keyword: CREATE
    - keyword: SOURCE
    - object_reference:
        naked_identifier: avro_source
    - keyword: FROM
    - keyword: KAFKA
    - keyword: CONNECTION
    - object_reference:
        naked_identifier: kafka_connection
    - bracketed:
        start_bracket: (
        code: TOPIC
        single_quote: "'test_topic'"
        end_bracket: )
    - keyword: FORMAT
    - code: AVRO
    - code: USING
    - code: CONFLUENT
    - code: SCHEMA
    - code: REGISTRY
    - code: CONNECTION
    - code: csr_connection
    - code: WITH
    - bracketed:
        start_bracket: (
        code: SIZE
        raw: '='
        single_quote: "'3xsmall'"
        end_bracket: )
- statement_terminator: ;
- statement:
    create_view_statement:
    - keyword: CREATE
    - keyword: VIEW
    - object_reference:
        naked_identifier: jsonified_kafka_source
    - keyword: AS
    - select_statement:
        select_clause:
        - keyword: SELECT
        - select_clause_element:
            expression:
              column_reference:
                naked_identifier: data
              binary_operator: ->>
              quoted_literal: "'field1'"
            alias_expression:
              keyword: AS
              naked_identifier: field_1
        - comma: ','
        - select_clause_element:
            expression:
              column_reference:
                naked_identifier: data
              binary_operator: ->>
              quoted_literal: "'field2'"
            alias_expression:
              keyword: AS
              naked_identifier: field_2
        - comma: ','
        - select_clause_element:
            expression:
              column_reference:
                naked_identifier: data
              binary_operator: ->>
              quoted_literal: "'field3'"
            alias_expression:
              keyword: AS
              naked_identifier: field_3
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                bracketed:
                  start_bracket: (
                  select_statement:
                    select_clause:
                      keyword: SELECT
                      select_clause_element:
                        expression:
                          cast_expression:
                            function:
                              function_name:
                                function_name_identifier: CONVERT_FROM
                              bracketed:
                              - start_bracket: (
                              - expression:
                                  column_reference:
                                    naked_identifier: data
                              - comma: ','
                              - expression:
                                  quoted_literal: "'utf8'"
                              - end_bracket: )
                            casting_operator: '::'
                            data_type:
                              keyword: jsonb
                        alias_expression:
                          keyword: AS
                          naked_identifier: data
                    from_clause:
                      keyword: FROM
                      from_expression:
                        from_expression_element:
                          table_expression:
                            table_reference:
                              naked_identifier: json_source
                  end_bracket: )
- statement_terminator: ;
- statement:
    create_source_kafka_statement:
    - keyword: CREATE
    - keyword: SOURCE
    - object_reference:
        naked_identifier: proto_source
    - keyword: FROM
    - keyword: KAFKA
    - keyword: CONNECTION
    - object_reference:
        naked_identifier: kafka_connection
    - bracketed:
        start_bracket: (
        code: TOPIC
        single_quote: "'test_topic'"
        end_bracket: )
    - keyword: FORMAT
    - code: PROTOBUF
    - code: USING
    - code: CONFLUENT
    - code: SCHEMA
    - code: REGISTRY
    - code: CONNECTION
    - code: csr_connection
    - code: WITH
    - bracketed:
        start_bracket: (
        code: SIZE
        raw: '='
        single_quote: "'3xsmall'"
        end_bracket: )
- statement_terminator: ;
- statement:
    create_source_kafka_statement:
    - keyword: CREATE
    - keyword: SOURCE
    - object_reference:
        naked_identifier: text_source
    - keyword: FROM
    - keyword: KAFKA
    - keyword: CONNECTION
    - object_reference:
        naked_identifier: kafka_connection
    - bracketed:
        start_bracket: (
        code: TOPIC
        single_quote: "'test_topic'"
        end_bracket: )
    - keyword: FORMAT
    - code: TEXT
    - code: ENVELOPE
    - code: UPSERT
    - code: WITH
    - bracketed:
        start_bracket: (
        code: SIZE
        raw: '='
        single_quote: "'3xsmall'"
        end_bracket: )
- statement_terminator: ;
- statement:
    create_source_kafka_statement:
    - keyword: CREATE
    - keyword: SOURCE
    - object_reference:
        naked_identifier: csv_source
    - bracketed:
      - start_bracket: (
      - column_reference:
          naked_identifier: col_foo
      - comma: ','
      - column_reference:
          naked_identifier: col_bar
      - comma: ','
      - column_reference:
          naked_identifier: col_baz
      - end_bracket: )
    - keyword: FROM
    - keyword: KAFKA
    - keyword: CONNECTION
    - object_reference:
        naked_identifier: kafka_connection
    - bracketed:
        start_bracket: (
        code: TOPIC
        single_quote: "'test_topic'"
        end_bracket: )
    - keyword: FORMAT
    - code: CSV
    - code: WITH
    - numeric_literal: '3'
    - code: COLUMNS
    - code: WITH
    - bracketed:
        start_bracket: (
        code: SIZE
        raw: '='
        single_quote: "'3xsmall'"
        end_bracket: )
- statement_terminator: ;
- statement:
    create_source_load_generator_statement:
    - keyword: CREATE
    - keyword: SOURCE
    - object_reference:
        naked_identifier: auction_house
    - keyword: FROM
    - keyword: LOAD
    - keyword: GENERATOR
    - keyword: AUCTION
    - keyword: FOR
    - keyword: ALL
    - keyword: TABLES
    - keyword: WITH
    - bracketed:
        start_bracket: (
        code: SIZE
        raw: '='
        single_quote: "'3xsmall'"
        end_bracket: )
- statement_terminator: ;
- statement:
    create_source_load_generator_statement:
    - keyword: CREATE
    - keyword: SOURCE
    - object_reference:
        naked_identifier: marketing
    - keyword: FROM
    - keyword: LOAD
    - keyword: GENERATOR
    - keyword: MARKETING
    - bracketed:
      - start_bracket: (
      - code: SCALE
      - code: FACTOR
      - numeric_literal: '1'
      - end_bracket: )
    - keyword: FOR
    - keyword: ALL
    - keyword: TABLES
    - keyword: WITH
    - bracketed:
        start_bracket: (
        code: SIZE
        raw: '='
        single_quote: "'3xsmall'"
        end_bracket: )
- statement_terminator: ;
- statement:
    create_source_load_generator_statement:
    - keyword: CREATE
    - keyword: SOURCE
    - object_reference:
        naked_identifier: marketing
    - keyword: IN
    - keyword: CLUSTER
    - object_reference:
        naked_identifier: my_cluster
    - keyword: FROM
    - keyword: LOAD
    - keyword: GENERATOR
    - keyword: MARKETING
    - keyword: FOR
    - keyword: ALL
    - keyword: TABLES
- statement_terminator: ;
- statement:
    create_source_load_generator_statement:
    - keyword: CREATE
    - keyword: SOURCE
    - object_reference:
        naked_identifier: tpch
    - keyword: FROM
    - keyword: LOAD
    - keyword: GENERATOR
    - keyword: TPCH
    - bracketed:
      - start_bracket: (
      - code: SCALE
      - code: FACTOR
      - numeric_literal: '1'
      - end_bracket: )
    - keyword: FOR
    - keyword: ALL
    - keyword: TABLES
    - keyword: WITH
    - bracketed:
        start_bracket: (
        code: SIZE
        raw: '='
        single_quote: "'3xsmall'"
        end_bracket: )
- statement_terminator: ;
- statement:
    create_source_load_generator_statement:
    - keyword: CREATE
    - keyword: SOURCE
    - object_reference:
        naked_identifier: counter
    - keyword: FROM
    - keyword: LOAD
    - keyword: GENERATOR
    - keyword: COUNTER
    - keyword: WITH
    - bracketed:
        start_bracket: (
        code: SIZE
        raw: '='
        single_quote: "'3xsmall'"
        end_bracket: )
- statement_terminator: ;
- statement:
    create_source_postgres_statement:
    - keyword: CREATE
    - keyword: SOURCE
    - object_reference:
        naked_identifier: mz_source
    - keyword: FROM
    - keyword: POSTGRES
    - keyword: CONNECTION
    - object_reference:
        naked_identifier: pg_connection
    - bracketed:
        start_bracket: (
        code: PUBLICATION
        single_quote: "'mz_source'"
        end_bracket: )
    - keyword: FOR
    - keyword: ALL
    - keyword: TABLES
    - keyword: WITH
    - bracketed:
        start_bracket: (
        code: SIZE
        raw: '='
        single_quote: "'3xsmall'"
        end_bracket: )
- statement_terminator: ;
- statement:
    create_source_postgres_statement:
    - keyword: CREATE
    - keyword: SOURCE
    - object_reference:
        naked_identifier: mz_source
    - keyword: IN
    - keyword: CLUSTER
    - object_reference:
        naked_identifier: my_cluster
    - keyword: FROM
    - keyword: POSTGRES
    - keyword: CONNECTION
    - object_reference:
        naked_identifier: pg_connection
    - bracketed:
        start_bracket: (
        code: PUBLICATION
        single_quote: "'mz_source'"
        end_bracket: )
    - keyword: FOR
    - keyword: ALL
    - keyword: TABLES
- statement_terminator: ;
- statement:
    create_source_postgres_statement:
    - keyword: CREATE
    - keyword: SOURCE
    - object_reference:
        naked_identifier: mz_source
    - keyword: FROM
    - keyword: POSTGRES
    - keyword: CONNECTION
    - object_reference:
        naked_identifier: pg_connection
    - bracketed:
        start_bracket: (
        code: PUBLICATION
        single_quote: "'mz_source'"
        end_bracket: )
    - keyword: FOR
    - keyword: TABLES
    - bracketed:
      - start_bracket: (
      - code: table_1
      - comma: ','
      - code: table_2
      - code: AS
      - code: alias_table_2
      - end_bracket: )
    - keyword: WITH
    - bracketed:
        start_bracket: (
        code: SIZE
        raw: '='
        single_quote: "'3xsmall'"
        end_bracket: )
- statement_terminator: ;
- statement:
    create_source_postgres_statement:
    - keyword: CREATE
    - keyword: SOURCE
    - object_reference:
        naked_identifier: mz_source
    - keyword: FROM
    - keyword: POSTGRES
    - keyword: CONNECTION
    - object_reference:
        naked_identifier: pg_connection
    - bracketed:
      - start_bracket: (
      - code: PUBLICATION
      - single_quote: "'mz_source'"
      - comma: ','
      - code: TEXT
      - code: COLUMNS
      - bracketed:
        - start_bracket: (
        - code: table
        - raw: .
        - code: column_of_unsupported_type
        - end_bracket: )
      - end_bracket: )
    - keyword: FOR
    - keyword: ALL
    - keyword: TABLES
    - keyword: WITH
    - bracketed:
        start_bracket: (
        code: SIZE
        raw: '='
        single_quote: "'3xsmall'"
        end_bracket: )
- statement_terminator: ;
- statement:
    create_source_postgres_statement:
    - keyword: CREATE
    - keyword: SOURCE
    - object_reference:
        naked_identifier: mz_source
    - keyword: FROM
    - keyword: POSTGRES
    - keyword: CONNECTION
    - object_reference:
        naked_identifier: pg_connection
    - bracketed:
        start_bracket: (
        code: PUBLICATION
        single_quote: "'mz_source'"
        end_bracket: )
    - keyword: WITH
    - bracketed:
        start_bracket: (
        code: SIZE
        raw: '='
        single_quote: "'3xsmall'"
        end_bracket: )
- statement_terminator: ;
- statement:
    create_source_load_generator_statement:
    - keyword: CREATE
    - keyword: SOURCE
    - object_reference:
        naked_identifier: my_webhook_source
    - keyword: IN
    - keyword: CLUSTER
    - object_reference:
        naked_identifier: my_cluster
    - keyword: FROM
    - keyword: WEBHOOK
    - keyword: BODY
    - keyword: FORMAT
    - keyword: JSON
    - keyword: INCLUDE
    - keyword: HEADERS
    - bracketed:
      - start_bracket: (
      - code: NOT
      - single_quote: "'authorization'"
      - comma: ','
      - code: NOT
      - single_quote: "'x-api-key'"
      - end_bracket: )
- statement_terminator: ;
- statement:
    create_source_load_generator_statement:
    - keyword: CREATE
    - keyword: SOURCE
    - object_reference:
        naked_identifier: my_webhook_source
    - keyword: IN
    - keyword: CLUSTER
    - object_reference:
        naked_identifier: my_cluster
    - keyword: FROM
    - keyword: WEBHOOK
    - keyword: BODY
    - keyword: FORMAT
    - keyword: JSON
    - code: CHECK
    - bracketed:
      - start_bracket: (
      - code: WITH
      - bracketed:
        - start_bracket: (
        - code: HEADERS
        - comma: ','
        - code: BODY
        - code: AS
        - code: request_body
        - comma: ','
        - code: SECRET
        - code: my_webhook_shared_secret
        - end_bracket: )
      - code: decode
      - bracketed:
        - start_bracket: (
        - code: headers
        - json_operator: ->
        - single_quote: "'x-signature'"
        - comma: ','
        - single_quote: "'base64'"
        - end_bracket: )
      - raw: '='
      - code: hmac
      - bracketed:
        - start_bracket: (
        - code: request_body
        - comma: ','
        - code: my_webhook_shared_secret
        - comma: ','
        - single_quote: "'sha256'"
        - end_bracket: )
      - end_bracket: )
- statement_terminator: ;
- statement:
    create_source_load_generator_statement:
    - keyword: CREATE
    - keyword: SOURCE
    - object_reference:
        naked_identifier: webhook_with_basic_auth
    - keyword: IN
    - keyword: CLUSTER
    - object_reference:
        naked_identifier: my_cluster
    - keyword: FROM
    - keyword: WEBHOOK
    - keyword: BODY
    - keyword: FORMAT
    - keyword: JSON
    - code: CHECK
    - bracketed:
      - start_bracket: (
      - code: WITH
      - bracketed:
        - start_bracket: (
        - code: HEADERS
        - comma: ','
        - code: BODY
        - code: AS
        - code: request_body
        - comma: ','
        - code: SECRET
        - code: BASIC_HOOK_AUTH
        - end_bracket: )
      - code: headers
      - json_operator: ->
      - single_quote: "'authorization'"
      - raw: '='
      - code: BASIC_HOOK_AUTH
      - end_bracket: )
- statement_terminator: ;
- statement:
    create_type_statement:
    - keyword: CREATE
    - keyword: TYPE
    - object_reference:
        naked_identifier: type_name
    - keyword: AS
    - bracketed:
      - start_bracket: (
      - object_reference:
          naked_identifier: field_name
      - data_type:
          data_type_identifier: field_type
      - comma: ','
      - object_reference:
          naked_identifier: field_name
      - data_type:
          data_type_identifier: field_type
      - end_bracket: )
- statement_terminator: ;
- statement:
    create_type_statement:
    - keyword: CREATE
    - keyword: TYPE
    - object_reference:
        naked_identifier: row_type
    - keyword: AS
    - bracketed:
      - start_bracket: (
      - object_reference:
          naked_identifier: a
      - data_type:
          keyword: int
      - comma: ','
      - object_reference:
          naked_identifier: b
      - data_type:
          keyword: text
      - end_bracket: )
- statement_terminator: ;
- statement:
    create_type_statement:
    - keyword: CREATE
    - keyword: TYPE
    - object_reference:
        naked_identifier: nested_row_type
    - keyword: AS
    - bracketed:
      - start_bracket: (
      - object_reference:
          naked_identifier: a
      - data_type:
          data_type_identifier: row_type
      - comma: ','
      - object_reference:
          naked_identifier: b
      - data_type:
          keyword: float8
      - end_bracket: )
- statement_terminator: ;
