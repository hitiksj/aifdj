# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 9f570aaf4df7daa8f7f18f15eafb3690ca147858318f80bfce5f6947b153d23c
file:
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: list_transform
            bracketed:
              start_bracket: (
              expression:
                array_literal:
                - start_square_bracket: '['
                - numeric_literal: '4'
                - comma: ','
                - numeric_literal: '5'
                - comma: ','
                - numeric_literal: '6'
                - end_square_bracket: ']'
              comma: ','
              lambda_function:
                parameter: x
                lambda_arrow: ->
                expression:
                  column_reference:
                    naked_identifier: x
                  binary_operator: +
                  numeric_literal: '1'
              end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: list_filter
            bracketed:
              start_bracket: (
              expression:
                array_literal:
                - start_square_bracket: '['
                - numeric_literal: '4'
                - comma: ','
                - numeric_literal: '5'
                - comma: ','
                - numeric_literal: '6'
                - end_square_bracket: ']'
              comma: ','
              lambda_function:
                parameter: x
                lambda_arrow: ->
                expression:
                  column_reference:
                    naked_identifier: x
                  comparison_operator:
                    raw_comparison_operator: '>'
                  numeric_literal: '4'
              end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: list_transform
            bracketed:
              start_bracket: (
              expression:
                function:
                  function_name:
                    function_name_identifier: list_filter
                  bracketed:
                    start_bracket: (
                    expression:
                      array_literal:
                      - start_square_bracket: '['
                      - numeric_literal: '0'
                      - comma: ','
                      - numeric_literal: '1'
                      - comma: ','
                      - numeric_literal: '2'
                      - comma: ','
                      - numeric_literal: '3'
                      - comma: ','
                      - numeric_literal: '4'
                      - comma: ','
                      - numeric_literal: '5'
                      - end_square_bracket: ']'
                    comma: ','
                    lambda_function:
                      parameter: x
                      lambda_arrow: ->
                      expression:
                      - column_reference:
                          naked_identifier: x
                      - binary_operator: '%'
                      - numeric_literal: '2'
                      - comparison_operator:
                          raw_comparison_operator: '='
                      - numeric_literal: '0'
                    end_bracket: )
              comma: ','
              lambda_function:
                parameter: y
                lambda_arrow: ->
                expression:
                - column_reference:
                    naked_identifier: y
                - binary_operator: '*'
                - column_reference:
                    naked_identifier: y
              end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: list_filter
            bracketed:
              start_bracket: (
              expression:
                array_literal:
                - start_square_bracket: '['
                - numeric_literal: '1'
                - comma: ','
                - numeric_literal: '3'
                - comma: ','
                - numeric_literal: '1'
                - comma: ','
                - numeric_literal: '5'
                - end_square_bracket: ']'
              comma: ','
              lambda_function:
                bracketed:
                - start_bracket: (
                - parameter: x
                - comma: ','
                - parameter: i
                - end_bracket: )
                lambda_arrow: ->
                expression:
                - column_reference:
                    naked_identifier: x
                - comparison_operator:
                    raw_comparison_operator: '>'
                - column_reference:
                    naked_identifier: i
              end_bracket: )
- statement_terminator: ;
