# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 4bbd6cd8f25ad5a2bc3441c59ca99a248df8e978986ac1fd2baa185d82f499e3
file:
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          column_reference:
            identifier: orderkey
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: clerk
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: totalprice
      - comma: ','
      - select_clause_element:
          function:
            function_name:
              function_name_identifier: rank
            bracketed:
              start_bracket: (
              end_bracket: )
            over_clause:
              keyword: OVER
              bracketed:
                start_bracket: (
                window_specification:
                  partitionby_clause:
                  - keyword: PARTITION
                  - keyword: BY
                  - expression:
                      column_reference:
                        identifier: clerk
                  orderby_clause:
                  - keyword: ORDER
                  - keyword: BY
                  - column_reference:
                      identifier: totalprice
                  - keyword: DESC
                end_bracket: )
          alias_expression:
            keyword: AS
            identifier: rnk
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: orders
      orderby_clause:
      - keyword: ORDER
      - keyword: BY
      - column_reference:
          identifier: clerk
      - comma: ','
      - column_reference:
          identifier: rnk
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          column_reference:
            identifier: clerk
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: orderdate
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: orderkey
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: totalprice
      - comma: ','
      - select_clause_element:
          function:
            function_name:
              function_name_identifier: sum
            bracketed:
              start_bracket: (
              expression:
                column_reference:
                  identifier: totalprice
              end_bracket: )
            over_clause:
              keyword: OVER
              bracketed:
                start_bracket: (
                window_specification:
                  partitionby_clause:
                  - keyword: PARTITION
                  - keyword: BY
                  - expression:
                      column_reference:
                        identifier: clerk
                  orderby_clause:
                  - keyword: ORDER
                  - keyword: BY
                  - column_reference:
                      identifier: orderdate
                end_bracket: )
          alias_expression:
            keyword: AS
            identifier: rolling_sum
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: orders
      orderby_clause:
      - keyword: ORDER
      - keyword: BY
      - column_reference:
          identifier: clerk
      - comma: ','
      - column_reference:
          identifier: orderdate
      - comma: ','
      - column_reference:
          identifier: orderkey
