# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 69630c224e7d42bd02d11e08fa7078e7b972ee4fabbb9150d5879b170ce1ee55
file:
- statement:
    create_procedure_statement:
    - keyword: create
    - keyword: or
    - keyword: replace
    - keyword: procedure
    - function_name:
        function_name_identifier: sp_pi
    - function_parameter_list:
        bracketed:
          start_bracket: (
          end_bracket: )
    - keyword: returns
    - data_type:
        data_type_identifier: float
    - keyword: not
    - keyword: 'null'
    - keyword: language
    - keyword: javascript
    - keyword: as
    - udf_body: "$$\n    return 3.1415926;\n    $$"
- statement_terminator: ;
- statement:
    create_procedure_statement:
    - keyword: create
    - keyword: or
    - keyword: replace
    - keyword: procedure
    - function_name:
        function_name_identifier: stproc1
    - function_parameter_list:
        bracketed:
          start_bracket: (
          parameter: FLOAT_PARAM1
          data_type:
            data_type_identifier: FLOAT
          end_bracket: )
    - keyword: returns
    - data_type:
        data_type_identifier: string
    - keyword: language
    - keyword: javascript
    - keyword: strict
    - keyword: execute
    - keyword: as
    - keyword: owner
    - keyword: as
    - udf_body: "$$\n    var sql_command =\n     \"INSERT INTO stproc_test_table1\
        \ (num_col1) VALUES (\" + FLOAT_PARAM1 + \")\";\n    try {\n        snowflake.execute\
        \ (\n            {sqlText: sql_command}\n            );\n        return \"\
        Succeeded.\";   // Return a success/error indicator.\n        }\n    catch\
        \ (err)  {\n        return \"Failed: \" + err;   // Return a success/error\
        \ indicator.\n        }\n    $$"
- statement_terminator: ;
- statement:
    create_procedure_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: PROCEDURE
    - function_name:
        naked_identifier: public
        dot: .
        function_name_identifier: test_procedure
    - function_parameter_list:
        bracketed:
        - start_bracket: (
        - parameter: test_table
        - data_type:
            data_type_identifier: VARCHAR
            bracketed_arguments:
              bracketed:
                start_bracket: (
                end_bracket: )
        - comma: ','
        - parameter: test_col
        - data_type:
            data_type_identifier: VARCHAR
            bracketed_arguments:
              bracketed:
                start_bracket: (
                end_bracket: )
        - end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: VARCHAR
        bracketed_arguments:
          bracketed:
            start_bracket: (
            end_bracket: )
    - keyword: LANGUAGE
    - keyword: JAVASCRIPT
    - keyword: AS
    - udf_body: "$$\ntry {\n    var sql_command = \"ALTER TABLE \" + test_table +\
        \ \" DROP \" + tet_col;\n    snowflake.execute ({sqlText: sql_command});\n\
        \    return \"Succeeded.\";\n}\ncatch (err) {\n   return \"Failed: execute\
        \ \"+ sql_command +\". Error : \"+ err;   // Return a success/error indicator.\n\
        }\n$$"
- statement_terminator: ;
