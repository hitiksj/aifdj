# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: edb602cf51f028f41dbbf936a7f85c9c1a36293adc121fa2242a18c9c43b6d07
file:
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          column_reference:
          - identifier: t
          - dot: .
          - identifier: $1
      - comma: ','
      - select_clause_element:
          column_reference:
          - identifier: t
          - dot: .
          - identifier: $2
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              identifier: '@mystage1'
              bracketed:
                start_bracket: (
                keyword: file_format
                parameter_assigner: =>
                file_format_segment:
                  object_reference:
                    identifier: myformat
                end_bracket: )
            alias_expression:
              identifier: t
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: select
      - select_clause_element:
          column_reference:
          - identifier: t
          - dot: .
          - identifier: $1
      - comma: ','
      - select_clause_element:
          column_reference:
          - identifier: t
          - dot: .
          - identifier: $2
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              identifier: '@mystage1'
              bracketed:
              - start_bracket: (
              - keyword: file_format
              - parameter_assigner: =>
              - file_format_segment:
                  literal: "'myformat'"
              - comma: ','
              - keyword: pattern
              - parameter_assigner: =>
              - literal: "'.*data.*[.]csv.gz'"
              - end_bracket: )
            alias_expression:
              identifier: t
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: select
      - select_clause_element:
          column_reference:
          - identifier: t
          - dot: .
          - identifier: $1
      - comma: ','
      - select_clause_element:
          column_reference:
          - identifier: t
          - dot: .
          - identifier: $2
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: '@mystage1'
            alias_expression:
              identifier: t
- statement_terminator: ;
