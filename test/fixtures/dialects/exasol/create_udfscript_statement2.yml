# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 9f79c9e3d60f420489a74e968efe19a6457f38589f5b51c3be51d0c770048358
file:
  statement:
    create_udf_script:
    - keyword: CREATE
    - keyword: LUA
    - keyword: SCALAR
    - keyword: SCRIPT
    - script_reference:
        naked_identifier: map_words
    - bracketed:
        start_bracket: (
        column_datatype_definition:
          naked_identifier: w
          data_type:
            keyword: varchar
            bracketed_arguments:
              bracketed:
                start_bracket: (
                numeric_literal: '10000'
                end_bracket: )
        end_bracket: )
    - emits_segment:
        keyword: EMITS
        bracketed:
          start_bracket: (
          column_datatype_definition:
            naked_identifier: words
            data_type:
              keyword: varchar
              bracketed_arguments:
                bracketed:
                  start_bracket: (
                  numeric_literal: '100'
                  end_bracket: )
          end_bracket: )
    - keyword: AS
    - script_content:
      - code: function
      - code: run
      - bracketed:
          start_bracket: (
          code: ctx
          end_bracket: )
      - code: local
      - code: word
      - equals: '='
      - code: ctx
      - dot: .
      - code: w
      - code: if
      - bracketed:
        - start_bracket: (
        - code: word
        - like_operator: '~'
        - equals: '='
        - code: 'null'
        - end_bracket: )
      - code: then
      - code: for
      - code: i
      - code: in
      - code: unicode
      - dot: .
      - code: utf8
      - dot: .
      - code: gmatch
      - bracketed:
          start_bracket: (
          code: word
          comma: ','
          single_quote: "'([%w%p]+)'"
          end_bracket: )
      - code: do
      - code: ctx
      - dot: .
      - code: emit
      - bracketed:
          start_bracket: (
          code: i
          end_bracket: )
      - code: end
      - code: end
      - code: end
  function_script_terminator: /
