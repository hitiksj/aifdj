# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: c403a4c21d69fe82757b6582608ed3a6da124dfc3527415a58aad236277ec684
file:
- statement:
    create_udf_script:
    - keyword: CREATE
    - keyword: LUA
    - keyword: SCALAR
    - keyword: SCRIPT
    - script_reference:
        naked_identifier: my_average
    - bracketed:
      - start_bracket: (
      - column_datatype_definition:
          naked_identifier: a
          data_type:
            keyword: DOUBLE
      - comma: ','
      - column_datatype_definition:
          naked_identifier: b
          data_type:
            keyword: DOUBLE
      - orderby_clause:
        - keyword: ORDER
        - keyword: BY
        - numeric_literal: '1'
        - keyword: desc
      - end_bracket: )
    - keyword: RETURNS
    - data_type:
        keyword: DOUBLE
    - keyword: AS
    - script_content:
      - code: function
      - code: run
      - bracketed:
          start_bracket: (
          code: ctx
          end_bracket: )
      - code: if
      - code: ctx
      - dot: .
      - code: a
      - equals: '='
      - equals: '='
      - code: nil
      - code: or
      - code: ctx
      - dot: .
      - code: b
      - equals: '='
      - equals: '='
      - code: nil
      - code: then
      - code: return
      - code: 'NULL'
      - code: end
      - code: return
      - bracketed:
        - start_bracket: (
        - code: ctx
        - dot: .
        - code: a
        - plus: +
        - code: ctx
        - dot: .
        - code: b
        - end_bracket: )
      - divide: /
      - numeric_literal: '2'
      - code: end
- function_script_terminator: /
- statement:
    create_udf_script:
    - keyword: CREATE
    - keyword: LUA
    - keyword: SCALAR
    - keyword: SCRIPT
    - script_reference:
        naked_identifier: my_average
    - bracketed:
      - start_bracket: (
      - column_datatype_definition:
          naked_identifier: a
          data_type:
            keyword: DOUBLE
      - comma: ','
      - column_datatype_definition:
          naked_identifier: b
          data_type:
            keyword: DOUBLE
      - orderby_clause:
        - keyword: ORDER
        - keyword: BY
        - numeric_literal: '1'
        - keyword: desc
      - end_bracket: )
    - keyword: RETURNS
    - data_type:
        keyword: DOUBLE
    - keyword: AS
    - script_content:
      - code: function
      - code: run
      - bracketed:
          start_bracket: (
          code: ctx
          end_bracket: )
      - code: if
      - code: ctx
      - dot: .
      - code: a
      - equals: '='
      - equals: '='
      - code: nil
      - code: or
      - code: ctx
      - dot: .
      - code: b
      - equals: '='
      - equals: '='
      - code: nil
      - code: then
      - code: return
      - code: 'NULL'
      - code: end
      - code: x
      - equals: '='
      - numeric_literal: '10'
      - divide: /
      - numeric_literal: '2'
      - code: return
      - bracketed:
        - start_bracket: (
        - code: ctx
        - dot: .
        - code: a
        - plus: +
        - code: ctx
        - dot: .
        - code: b
        - end_bracket: )
      - divide: /
      - numeric_literal: '2'
      - code: end
- function_script_terminator: /
