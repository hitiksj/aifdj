# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: bc371af29b8f949369fa476a81b009cf89d025b40ba61cda52e3b086c09e6c10
file:
  statement:
    create_udf_script:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - naked_identifier: PYTHON3
    - keyword: SCALAR
    - keyword: SCRIPT
    - script_reference:
      - naked_identifier: MYSCHEMA
      - dot: .
      - naked_identifier: MYPYTHONSCRIPT
    - bracketed:
      - start_bracket: (
      - column_datatype_definition:
          naked_identifier: JSON_STR
          data_type:
            keyword: VARCHAR
            bracketed:
              start_bracket: (
              numeric_literal: '2000000'
              end_bracket: )
      - comma: ','
      - column_datatype_definition:
          naked_identifier: LANGUAGE_KEY
          data_type:
            keyword: VARCHAR
            bracketed:
              start_bracket: (
              numeric_literal: '50'
              end_bracket: )
      - comma: ','
      - column_datatype_definition:
          naked_identifier: TXT_KEY
          data_type:
            keyword: VARCHAR
            bracketed:
              start_bracket: (
              numeric_literal: '50'
              end_bracket: )
      - end_bracket: )
    - emits_segment:
        keyword: EMITS
        bracketed:
          start_bracket: (
          column_datatype_definition:
            naked_identifier: X
            data_type:
              keyword: VARCHAR
              bracketed:
                start_bracket: (
                numeric_literal: '2000000'
                end_bracket: )
          end_bracket: )
    - keyword: AS
    - script_content:
      - double_quote: "\"\"\"\n/*====================================================================\n\
          \    e.g.:\n    SELECT MYSCHEMA.MYPYTHONSCRIPT(\n            '[{\""
      - raw: '@lang'
      - double_quote: '":"'
      - raw: de
      - raw: '-'
      - raw: DE
      - double_quote: '","'
      - raw: $
      - double_quote: '":"'
      - raw: Krztxt
      - double_quote: '"}, {"'
      - raw: '@lang'
      - double_quote: '":"'
      - raw: en
      - raw: '-'
      - raw: GB
      - double_quote: '","'
      - raw: $
      - double_quote: '":"'
      - raw: Shrttxt
      - double_quote: "\"}]',\n            '@lang',\n            '$'\n        );\n\
          \ ====================================================================*/\n\
          \"\"\""
      - raw: def
      - raw: run
      - bracketed:
          start_bracket: (
          raw: ctx
          end_bracket: )
      - raw: ':'
      - raw: pass
  function_script_terminator: /
