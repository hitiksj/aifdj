# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 96a8a90d5cb19753570b96e0b15c0390b1676bb54dd1a8c226a75f998e31ea54
file:
- statement:
    select_statement:
      select_clause:
        keyword: select
        select_clause_element:
          function:
            function_name:
              function_name_identifier: my_function
            bracketed:
            - start_bracket: (
            - named_argument:
                naked_identifier: arg1
                right_arrow: =>
                expression:
                  numeric_literal: '3'
            - comma: ','
            - named_argument:
                naked_identifier: arg2
                right_arrow: =>
                expression:
                  numeric_literal: '4'
            - end_bracket: )
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                naked_identifier: dual
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: select
        select_clause_element:
          function:
            function_name:
              function_name_identifier: my_function
            bracketed:
              start_bracket: (
              expression:
                numeric_literal: '3'
              comma: ','
              named_argument:
                naked_identifier: arg2
                right_arrow: =>
                expression:
                  numeric_literal: '4'
              end_bracket: )
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                naked_identifier: dual
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: select
        select_clause_element:
          function:
            function_name:
              function_name_identifier: my_function
            bracketed:
              start_bracket: (
              named_argument:
                naked_identifier: arg1
                right_arrow: =>
                expression:
                  numeric_literal: '3'
              comma: ','
              expression:
                numeric_literal: '4'
              end_bracket: )
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                naked_identifier: dual
- statement_terminator: ;
