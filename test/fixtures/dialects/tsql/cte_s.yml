# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 145e3e4005f32d23ae158e267ef69ffa71d710ec2f63e133153af7b22a4f5d27
file:
  batch:
    statement:
      with_compound_statement:
        keyword: WITH
        common_table_expression:
        - identifier: Sales_CTE
        - bracketed:
            start_bracket: (
            identifier_list:
            - identifier: SalesPersonID
            - comma: ','
            - identifier: NumberOfOrders
            end_bracket: )
        - keyword: AS
        - bracketed:
            start_bracket: (
            select_statement:
              select_clause:
              - keyword: SELECT
              - select_clause_element:
                  column_reference:
                    identifier: SalesPersonID
              - comma: ','
              - select_clause_element:
                  function:
                    function_name:
                      function_name_identifier:
                        identifier: COUNT
                    bracketed:
                      start_bracket: (
                      star: '*'
                      end_bracket: )
              from_clause:
                keyword: FROM
                from_expression:
                  from_expression_element:
                    table_expression:
                      table_reference:
                      - identifier: Sales
                      - dot: .
                      - identifier: SalesOrderHeader
              where_clause:
                keyword: WHERE
                expression:
                - column_reference:
                    identifier: SalesPersonID
                - keyword: IS
                - keyword: NOT
                - keyword: 'NULL'
              groupby_clause:
              - keyword: GROUP
              - keyword: BY
              - column_reference:
                  identifier: SalesPersonID
            end_bracket: )
        select_statement:
          select_clause:
            keyword: SELECT
            select_clause_element:
              function:
                function_name:
                  function_name_identifier:
                    identifier: AVG
                bracketed:
                  start_bracket: (
                  expression:
                    column_reference:
                      identifier: NumberOfOrders
                  end_bracket: )
              alias_expression:
                keyword: AS
                identifier: '"Average Sales Per Person"'
          from_clause:
            keyword: FROM
            from_expression:
              from_expression_element:
                table_expression:
                  table_reference:
                    identifier: Sales_CTE
            statement_terminator: ;
