# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 5b18cc67450a02cc518543f4bad9a60eefd95180f16f40f44c9ae9af69954d70
file:
  batch:
  - statement:
      declare_segment:
        keyword: DECLARE
        parameter: '@DateNow'
        data_type:
          data_type_identifier: date
        comparison_operator:
          raw_comparison_operator: '='
        expression:
          function:
            function_name:
              function_name_identifier:
                identifier: ISNULL
            bracketed:
            - start_bracket: (
            - expression:
                function:
                  function_name:
                    identifier: Shared
                    dot: .
                    function_name_identifier:
                      identifier: GetESTDateTime
                  bracketed:
                    start_bracket: (
                    expression:
                      function:
                        function_name:
                          function_name_identifier:
                            identifier: GETDATE
                        bracketed:
                          start_bracket: (
                          end_bracket: )
                    end_bracket: )
            - comma: ','
            - expression:
                function:
                  function_name:
                    function_name_identifier:
                      identifier: GETDATE
                  bracketed:
                    start_bracket: (
                    end_bracket: )
            - end_bracket: )
  - statement:
      select_statement:
        select_clause:
        - keyword: select
        - select_clause_element:
            column_reference:
            - identifier: enc
            - dot: .
            - identifier: personid
            alias_expression:
              keyword: as
              identifier: personid
        - comma: ','
        - select_clause_element:
            function:
              function_name:
                keyword: cast
              bracketed:
                start_bracket: (
                expression:
                  literal: "'1900-01-01'"
                keyword: as
                data_type:
                  data_type_identifier: datetime2
                  bracketed:
                    start_bracket: (
                    expression:
                      literal: '7'
                    end_bracket: )
                end_bracket: )
            alias_expression:
              keyword: as
              identifier: DataRefreshDate
        from_clause:
          keyword: from
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  identifier: encounter
              alias_expression:
                identifier: enc
          statement_terminator: ;
