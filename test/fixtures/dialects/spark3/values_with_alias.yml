# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 1359d8be6bbbd128387df329b92ccf812cb139dec945bea54405e6c8f309a013
file:
- statement:
    values_clause:
      keyword: values
      delimited_values:
        tuple_value:
          bracketed:
          - start_bracket: (
          - scalar_value:
              literal: '1'
          - comma: ','
          - scalar_value:
              literal: '2'
          - end_bracket: )
      alias_expression:
        keyword: as
        identifier: t
- statement_terminator: ;
- statement:
    values_clause:
      keyword: values
      delimited_values:
        tuple_value:
          bracketed:
          - start_bracket: (
          - scalar_value:
              literal: '1'
          - comma: ','
          - scalar_value:
              literal: '2'
          - end_bracket: )
      alias_expression:
        identifier: t
- statement_terminator: ;
- statement:
    values_clause:
      keyword: values
      delimited_values:
        tuple_value:
          bracketed:
          - start_bracket: (
          - scalar_value:
              literal: '1'
          - comma: ','
          - scalar_value:
              literal: '2'
          - end_bracket: )
      alias_expression:
        keyword: as
        identifier: t
        bracketed:
          start_bracket: (
          identifier_list:
          - identifier: a
          - comma: ','
          - identifier: b
          end_bracket: )
- statement_terminator: ;
- statement:
    values_clause:
      keyword: values
      delimited_values:
      - tuple_value:
          bracketed:
          - start_bracket: (
          - scalar_value:
              literal: '1'
          - comma: ','
          - scalar_value:
              literal: '2'
          - end_bracket: )
      - comma: ','
      - tuple_value:
          bracketed:
          - start_bracket: (
          - scalar_value:
              literal: '3'
          - comma: ','
          - scalar_value:
              literal: '4'
          - end_bracket: )
      alias_expression:
        keyword: as
        identifier: t
        bracketed:
          start_bracket: (
          identifier_list:
          - identifier: a
          - comma: ','
          - identifier: b
          end_bracket: )
- statement_terminator: ;
- statement:
    values_clause:
      keyword: values
      delimited_values:
        tuple_value:
          bracketed:
          - start_bracket: (
          - scalar_value:
              literal: '1'
          - comma: ','
          - scalar_value:
              literal: '2'
          - end_bracket: )
      alias_expression:
        keyword: as
        bracketed:
          start_bracket: (
          identifier_list:
          - identifier: a
          - comma: ','
          - identifier: b
          end_bracket: )
- statement_terminator: ;
- statement:
    values_clause:
      keyword: values
      delimited_values:
        tuple_value:
          bracketed:
          - start_bracket: (
          - scalar_value:
              literal: '1'
          - comma: ','
          - scalar_value:
              literal: '2'
          - end_bracket: )
      alias_expression:
        identifier: t
        bracketed:
          start_bracket: (
          identifier_list:
          - identifier: a
          - comma: ','
          - identifier: b
          end_bracket: )
- statement_terminator: ;
- statement:
    values_clause:
      keyword: values
      delimited_values:
        tuple_value:
          bracketed:
          - start_bracket: (
          - scalar_value:
              literal: '1'
          - comma: ','
          - scalar_value:
              literal: '2'
          - end_bracket: )
      alias_expression:
        bracketed:
          start_bracket: (
          identifier_list:
          - identifier: a
          - comma: ','
          - identifier: b
          end_bracket: )
- statement_terminator: ;
- statement:
    values_clause:
      keyword: values
      delimited_values:
      - tuple_value:
          bracketed:
          - start_bracket: (
          - scalar_value:
              literal: '1'
          - comma: ','
          - scalar_value:
              literal: '2'
          - end_bracket: )
      - comma: ','
      - tuple_value:
          bracketed:
          - start_bracket: (
          - scalar_value:
              literal: '3'
          - comma: ','
          - scalar_value:
              literal: '4'
          - end_bracket: )
      alias_expression:
        keyword: as
        bracketed:
          start_bracket: (
          identifier_list:
          - identifier: a
          - comma: ','
          - identifier: b
          end_bracket: )
- statement_terminator: ;
- statement:
    values_clause:
      keyword: values
      delimited_values:
      - tuple_value:
          bracketed:
          - start_bracket: (
          - scalar_value:
              literal: '1'
          - comma: ','
          - scalar_value:
              literal: '2'
          - end_bracket: )
      - comma: ','
      - tuple_value:
          bracketed:
          - start_bracket: (
          - scalar_value:
              literal: '3'
          - comma: ','
          - scalar_value:
              literal: '4'
          - end_bracket: )
      alias_expression:
        identifier: t
        bracketed:
          start_bracket: (
          identifier_list:
          - identifier: a
          - comma: ','
          - identifier: b
          end_bracket: )
- statement_terminator: ;
- statement:
    values_clause:
      keyword: values
      delimited_values:
      - tuple_value:
          bracketed:
          - start_bracket: (
          - scalar_value:
              literal: '1'
          - comma: ','
          - scalar_value:
              literal: '2'
          - end_bracket: )
      - comma: ','
      - tuple_value:
          bracketed:
          - start_bracket: (
          - scalar_value:
              literal: '3'
          - comma: ','
          - scalar_value:
              literal: '4'
          - end_bracket: )
      alias_expression:
        bracketed:
          start_bracket: (
          identifier_list:
          - identifier: a
          - comma: ','
          - identifier: b
          end_bracket: )
- statement_terminator: ;
