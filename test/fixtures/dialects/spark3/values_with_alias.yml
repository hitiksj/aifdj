# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: bb4d51b968ea817e3ce9622fa1beb48219d405e25cfa50bdb62e46350f94cdc9
file:
- base:
    values_clause:
      keyword: values
      bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
      alias_expression:
        keyword: as
        identifier: t
- statement_terminator: ;
- base:
    values_clause:
      keyword: values
      bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
      alias_expression:
        identifier: t
- statement_terminator: ;
- base:
    values_clause:
      keyword: values
      bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
      alias_expression:
        keyword: as
        identifier: t
        bracketed:
          start_bracket: (
          identifier_list:
          - identifier: a
          - comma: ','
          - identifier: b
          end_bracket: )
- statement_terminator: ;
- base:
    values_clause:
    - keyword: values
    - bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
    - comma: ','
    - bracketed:
      - start_bracket: (
      - literal: '3'
      - comma: ','
      - literal: '4'
      - end_bracket: )
    - alias_expression:
        keyword: as
        identifier: t
        bracketed:
          start_bracket: (
          identifier_list:
          - identifier: a
          - comma: ','
          - identifier: b
          end_bracket: )
- statement_terminator: ;
- base:
    values_clause:
      keyword: values
      bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
      alias_expression:
        keyword: as
        bracketed:
          start_bracket: (
          identifier_list:
          - identifier: a
          - comma: ','
          - identifier: b
          end_bracket: )
- statement_terminator: ;
- base:
    values_clause:
      keyword: values
      bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
      alias_expression:
        identifier: t
        bracketed:
          start_bracket: (
          identifier_list:
          - identifier: a
          - comma: ','
          - identifier: b
          end_bracket: )
- statement_terminator: ;
- base:
    values_clause:
      keyword: values
      bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
      alias_expression:
        bracketed:
          start_bracket: (
          identifier_list:
          - identifier: a
          - comma: ','
          - identifier: b
          end_bracket: )
- statement_terminator: ;
- base:
    values_clause:
    - keyword: values
    - bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
    - comma: ','
    - bracketed:
      - start_bracket: (
      - literal: '3'
      - comma: ','
      - literal: '4'
      - end_bracket: )
    - alias_expression:
        keyword: as
        bracketed:
          start_bracket: (
          identifier_list:
          - identifier: a
          - comma: ','
          - identifier: b
          end_bracket: )
- statement_terminator: ;
- base:
    values_clause:
    - keyword: values
    - bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
    - comma: ','
    - bracketed:
      - start_bracket: (
      - literal: '3'
      - comma: ','
      - literal: '4'
      - end_bracket: )
    - alias_expression:
        identifier: t
        bracketed:
          start_bracket: (
          identifier_list:
          - identifier: a
          - comma: ','
          - identifier: b
          end_bracket: )
- statement_terminator: ;
- base:
    values_clause:
    - keyword: values
    - bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
    - comma: ','
    - bracketed:
      - start_bracket: (
      - literal: '3'
      - comma: ','
      - literal: '4'
      - end_bracket: )
    - alias_expression:
        bracketed:
          start_bracket: (
          identifier_list:
          - identifier: a
          - comma: ','
          - identifier: b
          end_bracket: )
- statement_terminator: ;
