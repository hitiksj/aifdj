# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 6eed0ce740c144f65254601f9f1610dd26a5b493224776f427578eed55525de5
file:
- base:
    values_clause:
      keyword: values
      bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
    unparsable:
      raw: as
      bracketed:
      - start_bracket: (
      - raw: a
      - comma: ','
      - raw: b
      - end_bracket: )
- statement_terminator: ;
- base:
    values_clause:
    - keyword: values
    - bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
    - keyword: as
    - table_alias_expression:
        alias_expression:
          identifier: t
          bracketed:
            start_bracket: (
            identifier_list:
            - identifier: a
            - comma: ','
            - identifier: b
            end_bracket: )
- statement_terminator: ;
- base:
    values_clause:
      keyword: values
      bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
      table_alias_expression:
        alias_expression:
          identifier: t
          bracketed:
            start_bracket: (
            identifier_list:
            - identifier: a
            - comma: ','
            - identifier: b
            end_bracket: )
- statement_terminator: ;
- base:
    values_clause:
      keyword: values
      bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
    unparsable:
      bracketed:
      - start_bracket: (
      - raw: a
      - comma: ','
      - raw: b
      - end_bracket: )
- statement_terminator: ;
- base:
    values_clause:
    - keyword: values
    - bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
    - comma: ','
    - bracketed:
      - start_bracket: (
      - literal: '3'
      - comma: ','
      - literal: '4'
      - end_bracket: )
    unparsable:
      raw: as
      bracketed:
      - start_bracket: (
      - raw: a
      - comma: ','
      - raw: b
      - end_bracket: )
- statement_terminator: ;
- base:
    values_clause:
    - keyword: values
    - bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
    - comma: ','
    - bracketed:
      - start_bracket: (
      - literal: '3'
      - comma: ','
      - literal: '4'
      - end_bracket: )
    - keyword: as
    - table_alias_expression:
        alias_expression:
          identifier: t
          bracketed:
            start_bracket: (
            identifier_list:
            - identifier: a
            - comma: ','
            - identifier: b
            end_bracket: )
- statement_terminator: ;
- base:
    values_clause:
    - keyword: values
    - bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
    - comma: ','
    - bracketed:
      - start_bracket: (
      - literal: '3'
      - comma: ','
      - literal: '4'
      - end_bracket: )
    - table_alias_expression:
        alias_expression:
          identifier: t
          bracketed:
            start_bracket: (
            identifier_list:
            - identifier: a
            - comma: ','
            - identifier: b
            end_bracket: )
- statement_terminator: ;
- base:
    values_clause:
    - keyword: values
    - bracketed:
      - start_bracket: (
      - literal: '1'
      - comma: ','
      - literal: '2'
      - end_bracket: )
    - comma: ','
    - bracketed:
      - start_bracket: (
      - literal: '3'
      - comma: ','
      - literal: '4'
      - end_bracket: )
    unparsable:
      bracketed:
      - start_bracket: (
      - raw: a
      - comma: ','
      - raw: b
      - end_bracket: )
- statement_terminator: ;
