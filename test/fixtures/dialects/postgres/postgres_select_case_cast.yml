# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 17c5999ccb49336bf60b9c82ef5e752a74dfc3fe171ce63ff634918fbb8cfdf8
file:
- statement:
    select_statement:
      select_clause:
      - keyword: select
      - select_clause_element:
          column_reference:
            identifier: col0
      - comma: ','
      - select_clause_element:
          expression:
            case_expression:
            - keyword: case
            - keyword: when
            - expression:
                column_reference:
                  identifier: col1
            - keyword: then
            - expression:
                column_reference:
                  identifier: col2
            - keyword: else
            - expression:
                column_reference:
                  identifier: col3
            - keyword: end
            cast_expression:
              casting_operator: '::'
              data_type:
                data_type_identifier: text
          alias_expression:
            keyword: as
            identifier: mycol
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: table1
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: select
      - select_clause_element:
          column_reference:
            identifier: col0
      - comma: ','
      - select_clause_element:
          expression:
          - case_expression:
            - keyword: case
            - keyword: when
            - expression:
                column_reference:
                  identifier: col1
            - keyword: then
            - expression:
                column_reference:
                  identifier: col2
            - keyword: else
            - expression:
                column_reference:
                  identifier: col3
            - keyword: end
          - cast_expression:
              casting_operator: '::'
              data_type:
                data_type_identifier: int
          - cast_expression:
              casting_operator: '::'
              data_type:
                keyword: float
          alias_expression:
            keyword: as
            identifier: mycol
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: table1
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: select
      - select_clause_element:
          column_reference:
            identifier: col0
      - comma: ','
      - select_clause_element:
          function:
            function_name:
              function_name_identifier: cast
            bracketed:
              start_bracket: (
              expression:
                case_expression:
                - keyword: case
                - keyword: when
                - expression:
                    column_reference:
                      identifier: col1
                - keyword: then
                - expression:
                    column_reference:
                      identifier: col2
                - keyword: else
                - expression:
                    column_reference:
                      identifier: col3
                - keyword: end
              keyword: as
              data_type:
                data_type_identifier: text
              end_bracket: )
          alias_expression:
            keyword: as
            identifier: mycol
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: table1
- statement_terminator: ;
