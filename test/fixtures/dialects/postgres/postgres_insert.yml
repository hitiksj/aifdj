# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 82a56030416abff4e1aa0b4ef4910c308e5a4ab09fcfbb6aded59c9e6d2ed6cc
file:
- statement:
    insert_statement:
    - keyword: INSERT
    - keyword: INTO
    - table_reference:
        identifier: test
    - bracketed:
      - start_bracket: (
      - column_reference:
          identifier: id
      - comma: ','
      - column_reference:
          identifier: col1
      - end_bracket: )
    - keyword: OVERRIDING
    - keyword: SYSTEM
    - keyword: VALUE
    - values_clause:
        keyword: VALUES
        delimited_values:
          tuple_value:
            bracketed:
            - start_bracket: (
            - scalar_value:
                literal: '1'
            - comma: ','
            - scalar_value:
                literal: "'val'"
            - end_bracket: )
- statement_terminator: ;
- statement:
    insert_statement:
    - keyword: INSERT
    - keyword: INTO
    - table_reference:
        identifier: foo
    - bracketed:
        start_bracket: (
        column_reference:
          identifier: bar
        end_bracket: )
    - values_clause:
        keyword: VALUES
        delimited_values:
          tuple_value:
            bracketed:
              start_bracket: (
              scalar_value:
                bare_function: current_timestamp
              end_bracket: )
- statement_terminator: ;
- statement:
    insert_statement:
    - keyword: INSERT
    - keyword: INTO
    - table_reference:
        identifier: distributors
    - alias_expression:
        keyword: AS
        identifier: d
    - bracketed:
      - start_bracket: (
      - column_reference:
          identifier: did
      - comma: ','
      - column_reference:
          identifier: dname
      - end_bracket: )
    - values_clause:
        keyword: VALUES
        delimited_values:
          tuple_value:
            bracketed:
            - start_bracket: (
            - scalar_value:
                literal: '8'
            - comma: ','
            - scalar_value:
                literal: "'Anvil Distribution'"
            - end_bracket: )
- statement_terminator: ;
