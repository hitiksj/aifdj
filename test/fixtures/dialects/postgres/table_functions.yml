# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 87790be6cd29e35d6b49f004079316a4d1a8ce524ff8545019db85b2247c4b25
file:
- statement:
    select_statement:
      select_clause:
        keyword: select
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              function:
                function_name:
                  function_name_identifier: unnest
                bracketed:
                  start_bracket: (
                  expression:
                    typed_array_literal:
                      array_type:
                        keyword: array
                      array_literal:
                      - start_square_bracket: '['
                      - quoted_literal: "'123'"
                      - comma: ','
                      - quoted_literal: "'456'"
                      - end_square_bracket: ']'
                  end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: select
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              function:
                function_name:
                  function_name_identifier: unnest
                bracketed:
                  start_bracket: (
                  expression:
                    typed_array_literal:
                      array_type:
                        keyword: array
                      array_literal:
                      - start_square_bracket: '['
                      - quoted_literal: "'123'"
                      - comma: ','
                      - quoted_literal: "'456'"
                      - end_square_bracket: ']'
                  end_bracket: )
            alias_expression:
              keyword: as
              naked_identifier: a
              bracketed:
                start_bracket: (
                identifier_list:
                - naked_identifier: val
                - comma: ','
                - naked_identifier: row_num
                end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: select
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
            - function:
                function_name:
                  function_name_identifier: unnest
                bracketed:
                  start_bracket: (
                  expression:
                    typed_array_literal:
                      array_type:
                        keyword: array
                      array_literal:
                      - start_square_bracket: '['
                      - quoted_literal: "'123'"
                      - comma: ','
                      - quoted_literal: "'456'"
                      - end_square_bracket: ']'
                  end_bracket: )
            - keyword: with
            - keyword: ordinality
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: select
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
            - function:
                function_name:
                  function_name_identifier: unnest
                bracketed:
                  start_bracket: (
                  expression:
                    typed_array_literal:
                      array_type:
                        keyword: array
                      array_literal:
                      - start_square_bracket: '['
                      - quoted_literal: "'123'"
                      - comma: ','
                      - quoted_literal: "'456'"
                      - end_square_bracket: ']'
                  end_bracket: )
            - keyword: with
            - keyword: ordinality
            alias_expression:
              keyword: as
              naked_identifier: a
              bracketed:
                start_bracket: (
                identifier_list:
                - naked_identifier: val
                - comma: ','
                - naked_identifier: row_num
                end_bracket: )
- statement_terminator: ;
