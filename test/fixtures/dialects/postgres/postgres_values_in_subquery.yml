# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 8f78ff77ce8210cb0bb643a4cc034986d2843c5b147492872df6f2f57edf0034
file:
- statement:
    with_compound_statement:
      keyword: WITH
      common_table_expression:
      - identifier: t
      - bracketed:
          start_bracket: (
          identifier_list:
          - identifier: col_1
          - comma: ','
          - identifier: col_2
          end_bracket: )
      - keyword: AS
      - bracketed:
          start_bracket: (
          values_clause:
            keyword: VALUES
            delimited_values:
              tuple_value:
                bracketed:
                - start_bracket: (
                - scalar_value:
                    literal: "'08RIX0'"
                - comma: ','
                - scalar_value:
                    literal: '0.435'
                    cast_expression:
                      casting_operator: '::'
                      data_type:
                        keyword: NUMERIC
                        bracketed:
                        - start_bracket: (
                        - literal: '4'
                        - comma: ','
                        - literal: '3'
                        - end_bracket: )
                - end_bracket: )
          end_bracket: )
      select_statement:
        select_clause:
          keyword: SELECT
          select_clause_element:
            wildcard_expression:
              wildcard_identifier:
                star: '*'
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  identifier: t
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            bracketed:
              start_bracket: (
              table_expression:
                values_clause:
                  keyword: VALUES
                  delimited_values:
                    tuple_value:
                      bracketed:
                        start_bracket: (
                        scalar_value:
                          literal: '1'
                        end_bracket: )
              end_bracket: )
            alias_expression:
              keyword: AS
              identifier: t
              bracketed:
                start_bracket: (
                identifier_list:
                  identifier: c1
                end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            bracketed:
              start_bracket: (
              table_expression:
                values_clause:
                  keyword: VALUES
                  delimited_values:
                  - tuple_value:
                      bracketed:
                      - start_bracket: (
                      - scalar_value:
                          literal: '1'
                      - comma: ','
                      - scalar_value:
                          literal: '2'
                      - end_bracket: )
                  - comma: ','
                  - tuple_value:
                      bracketed:
                      - start_bracket: (
                      - scalar_value:
                          literal: '3'
                      - comma: ','
                      - scalar_value:
                          literal: '4'
                      - end_bracket: )
              end_bracket: )
            alias_expression:
              keyword: AS
              identifier: t
              bracketed:
                start_bracket: (
                identifier_list:
                - identifier: c1
                - comma: ','
                - identifier: c2
                end_bracket: )
- statement_terminator: ;
