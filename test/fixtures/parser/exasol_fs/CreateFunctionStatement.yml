# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 849614aec33e152ee572da0d6a7aeea1888cb911581e3b1685ee6f225b5adede
file:
- statement:
    create_function_statement:
    - keyword: CREATE
    - binary_operator: OR
    - keyword: REPLACE
    - keyword: FUNCTION
    - function_reference:
        identifier: percentage
    - bracketed:
      - start_bracket: (
      - identifier: fraction
      - data_type:
          data_type_identifier: DECIMAL
      - comma: ','
      - identifier: entirety
      - data_type:
          data_type_identifier: DECIMAL
      - end_bracket: )
    - keyword: RETURN
    - data_type:
        data_type_identifier: VARCHAR
        bracketed:
          start_bracket: (
          expression:
            literal: '10'
          end_bracket: )
    - keyword: IS
    - variable: res
    - data_type:
        data_type_identifier: DECIMAL
    - semicolon: ;
    - keyword: BEGIN
    - function_body:
        function_assignment:
          variable: res
          assignment_operator: :=
          expression:
            bracketed:
              start_bracket: (
              expression:
                literal: '100'
                binary_operator: '*'
                column_reference:
                  identifier: fraction
              end_bracket: )
            binary_operator: /
            column_reference:
              identifier: entirety
          semicolon: ;
    - keyword: RETURN
    - expression:
        column_reference:
          identifier: res
        binary_operator: '||'
        literal: "' %'"
    - semicolon: ;
    - keyword: END
    - function_reference:
        identifier: percentage
    - semicolon: ;
- statement_terminator: /
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_reference:
        identifier: hello
    - bracketed:
        start_bracket: (
        end_bracket: )
    - keyword: RETURN
    - data_type:
        data_type_identifier: VARCHAR
        bracketed:
          start_bracket: (
          expression:
            literal: '10'
          end_bracket: )
    - keyword: AS
    - variable: res
    - data_type:
        data_type_identifier: DECIMAL
    - semicolon: ;
    - keyword: BEGIN
    - function_body:
        function_assignment:
          variable: res
          assignment_operator: :=
          function:
            function_name:
              identifier: hello
              dot: .
              function_name_identifier: world
            bracketed:
              start_bracket: (
              expression:
                column_reference:
                  identifier: '"no"'
              end_bracket: )
          semicolon: ;
    - keyword: RETURN
    - expression:
        literal: "'HELLO'"
    - semicolon: ;
    - keyword: END
    - function_reference:
        identifier: hello
    - semicolon: ;
- statement_terminator: /
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_reference:
        identifier: case_function
    - bracketed:
        start_bracket: (
        end_bracket: )
    - keyword: RETURN
    - data_type:
        data_type_identifier: VARCHAR
        bracketed:
          start_bracket: (
          expression:
            literal: '10'
          end_bracket: )
    - keyword: AS
    - variable: res
    - data_type:
        data_type_identifier: DECIMAL
    - semicolon: ;
    - keyword: BEGIN
    - function_body:
        function_assignment:
          variable: res
          assignment_operator: :=
          expression:
            case_expression:
            - keyword: CASE
            - keyword: WHEN
            - expression:
                column_reference:
                  identifier: input_variable
                comparison_operator: <
                literal: '0'
            - keyword: THEN
            - expression:
                literal: '0'
            - keyword: ELSE
            - expression:
                column_reference:
                  identifier: input_variable
            - keyword: END
          semicolon: ;
    - keyword: RETURN
    - expression:
        column_reference:
          identifier: res
    - semicolon: ;
    - keyword: END
    - function_reference:
        identifier: case_function
    - semicolon: ;
- statement_terminator: /
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_reference:
        identifier: assignment_function
    - bracketed:
        start_bracket: (
        end_bracket: )
    - keyword: RETURN
    - data_type:
        data_type_identifier: VARCHAR
        bracketed:
          start_bracket: (
          expression:
            literal: '10'
          end_bracket: )
    - keyword: AS
    - variable: res
    - data_type:
        data_type_identifier: DECIMAL
    - semicolon: ;
    - keyword: BEGIN
    - function_body:
        function_assignment:
          variable: res
          assignment_operator: :=
          literal: "'Hello World'"
          semicolon: ;
    - keyword: RETURN
    - expression:
        column_reference:
          identifier: res
    - semicolon: ;
    - keyword: END
    - function_reference:
        identifier: assignment_function
    - semicolon: ;
- statement_terminator: /
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_reference:
        identifier: if_function
    - bracketed:
        start_bracket: (
        end_bracket: )
    - keyword: RETURN
    - data_type:
        data_type_identifier: VARCHAR
        bracketed:
          start_bracket: (
          expression:
            literal: '10'
          end_bracket: )
    - keyword: AS
    - variable: res
    - data_type:
        data_type_identifier: DECIMAL
    - semicolon: ;
    - keyword: BEGIN
    - function_body:
        function_if_branch:
        - keyword: IF
        - expression:
            column_reference:
              identifier: input_variable
            comparison_operator: '='
            literal: '0'
        - keyword: THEN
        - function_body:
            function_assignment:
            - variable: res
            - assignment_operator: :=
            - variable: 'NULL'
            - semicolon: ;
        - keyword: ELSEIF
        - expression:
            column_reference:
              identifier: input_variable
            comparison_operator: '='
            literal: '1'
        - keyword: THEN
        - function_body:
            function_assignment:
              variable: res
              assignment_operator: :=
              literal: "'HELLO'"
              semicolon: ;
        - keyword: ELSEIF
        - expression:
            column_reference:
              identifier: input_variable
            comparison_operator: '='
            literal: '2'
        - keyword: THEN
        - function_body:
            function_assignment:
              variable: res
              assignment_operator: :=
              literal: "'HALLO'"
              semicolon: ;
        - keyword: ELSE
        - function_body:
            function_assignment:
            - variable: res
            - assignment_operator: :=
            - variable: input_variable
            - semicolon: ;
        - keyword: END
        - keyword: IF
        - semicolon: ;
    - keyword: RETURN
    - expression:
        column_reference:
          identifier: res
    - semicolon: ;
    - keyword: END
    - function_reference:
        identifier: if_function
    - semicolon: ;
- statement_terminator: /
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_reference:
        identifier: for_loop_function
    - bracketed:
        start_bracket: (
        end_bracket: )
    - keyword: RETURN
    - data_type:
        data_type_identifier: VARCHAR
        bracketed:
          start_bracket: (
          expression:
            literal: '10'
          end_bracket: )
    - keyword: AS
    - variable: res
    - data_type:
        data_type_identifier: DECIMAL
    - semicolon: ;
    - keyword: BEGIN
    - function_body:
        function_for_loop:
        - keyword: FOR
        - identifier: cnt
        - assignment_operator: :=
        - expression:
            literal: '1'
        - keyword: TO
        - expression:
            column_reference:
              identifier: input_variable
        - keyword: DO
        - function_body:
            function_assignment:
              variable: res
              assignment_operator: :=
              expression:
                column_reference:
                  identifier: res
                binary_operator: '*'
                literal: '2'
              semicolon: ;
        - keyword: END
        - keyword: FOR
        - semicolon: ;
    - keyword: RETURN
    - expression:
        column_reference:
          identifier: res
    - semicolon: ;
    - keyword: END
    - function_reference:
        identifier: for_loop_function
    - semicolon: ;
- statement_terminator: /
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_reference:
        identifier: for_loop_function2
    - bracketed:
        start_bracket: (
        end_bracket: )
    - keyword: RETURN
    - data_type:
        data_type_identifier: VARCHAR
        bracketed:
          start_bracket: (
          expression:
            literal: '10'
          end_bracket: )
    - keyword: AS
    - variable: res
    - data_type:
        data_type_identifier: DECIMAL
    - semicolon: ;
    - keyword: BEGIN
    - function_body:
        function_for_loop:
        - keyword: FOR
        - identifier: cnt
        - keyword: IN
        - expression:
            literal: '1'
        - range_operator: ..
        - expression:
            literal: '10'
        - keyword: LOOP
        - function_body:
            function_assignment:
              variable: res
              assignment_operator: :=
              expression:
                column_reference:
                  identifier: res
                binary_operator: '*'
                literal: '2'
              semicolon: ;
        - keyword: END
        - keyword: LOOP
        - semicolon: ;
    - keyword: RETURN
    - expression:
        column_reference:
          identifier: res
    - semicolon: ;
    - keyword: END
    - function_reference:
        identifier: for_loop_function2
    - semicolon: ;
- statement_terminator: /
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_reference:
        identifier: for_loop_function3
    - bracketed:
        start_bracket: (
        end_bracket: )
    - keyword: RETURN
    - data_type:
        data_type_identifier: VARCHAR
        bracketed:
          start_bracket: (
          expression:
            literal: '10'
          end_bracket: )
    - keyword: AS
    - variable: res
    - data_type:
        data_type_identifier: DECIMAL
    - semicolon: ;
    - keyword: BEGIN
    - function_body:
        function_while_loop:
        - keyword: WHILE
        - expression:
          - column_reference:
              identifier: cnt
          - comparison_operator: <=
          - column_reference:
              identifier: input_variable
        - keyword: DO
        - function_body:
            function_assignment:
              variable: res
              assignment_operator: :=
              expression:
                column_reference:
                  identifier: res
                binary_operator: '*'
                literal: '2'
              semicolon: ;
        - function_body:
            function_assignment:
              variable: cnt
              assignment_operator: :=
              expression:
                column_reference:
                  identifier: cnt
                binary_operator: +
                literal: '1'
              semicolon: ;
        - keyword: END
        - keyword: WHILE
        - semicolon: ;
    - keyword: RETURN
    - expression:
        column_reference:
          identifier: res
    - semicolon: ;
    - keyword: END
    - function_reference:
        identifier: for_loop_function3
    - semicolon: ;
- statement_terminator: /
