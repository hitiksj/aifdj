rule: L043

test_pass_case_cannot_be_reduced_1:
  pass_str: |
    select
        fab > 0 as is_fab
    from fancy_table
test_pass_case_cannot_be_reduced_2:
  pass_str: |
    select
        case when fab > 0 then true end as is_fab
    from fancy_table
test_pass_case_cannot_be_reduced_3:
  pass_str: |
    select
        case when fab is not null then false end as is_fab
    from fancy_table
test_pass_case_cannot_be_reduced_4:
  pass_str: |
    select
        case when fab > 0 then true else true end as is_fab
    from fancy_table
test_pass_case_cannot_be_reduced_5:
  pass_str: |
    select
        case when fab <> 0 then 'just a string' end as fab_category
    from fancy_table
test_pass_case_cannot_be_reduced_6:
  pass_str: |
    select
        case
          when fab <> 0 then true
          when fab < 0 then 'not a bool'
        end as fab_category
    from fancy_table
test_fail_unnecessary_case_1:
  fail_str: |
    select
        case
            when fab > 0 then true else false end as is_fab
    from fancy_table
  fix_str: |
    select
        coalesce(fab > 0, false) as is_fab
    from fancy_table
test_fail_unnecessary_case_2:
  fail_str: |
    select
        case
            when fab > 0 then false else true end as is_fab
    from fancy_table
  fix_str: |
    select
        not coalesce(fab > 0, false) as is_fab
    from fancy_table
test_fail_unnecessary_case_3:
  fail_str: |
    select
        case
            when fab > 0 and tot > 0 then true else false end as is_fab
    from fancy_table
  fix_str: |
    select
        coalesce(fab > 0 and tot > 0, false) as is_fab
    from fancy_table
test_fail_unnecessary_case_4:
  fail_str: |
    select
        case
            when fab > 0 and tot > 0 then false else true end as is_fab
    from fancy_table
  fix_str: |
    select
        not coalesce(fab > 0 and tot > 0, false) as is_fab
    from fancy_table
test_fail_unnecessary_case_5:
  fail_str: |
    select
        case
            when not fab > 0 or tot > 0 then false else true end as is_fab
    from fancy_table
  fix_str: |
    select
        not coalesce(not fab > 0 or tot > 0, false) as is_fab
    from fancy_table
test_fail_unnecessary_case_6:
  fail_str: |
    select
        subscriptions_xf.metadata_migrated,

        case  -- BEFORE L043 FIX
            when perks.perk is null then false
            else true
        end as perk_redeemed,

        perks.received_at as perk_received_at

    from subscriptions_xf
  fix_str: |
    select
        subscriptions_xf.metadata_migrated,

        not coalesce(perks.perk is null, false) as perk_redeemed,

        perks.received_at as perk_received_at

    from subscriptions_xf
